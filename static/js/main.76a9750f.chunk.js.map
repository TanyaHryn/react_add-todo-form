{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","preparedTodos","userId","usersFromServer","find","App","useState","visibleTodos","setTodos","setTitle","isComplited","setIsComplited","selectedUser","setSelectedUser","hasUserError","setHasUserError","hasTitleError","setHasTitleError","action","method","onSubmit","event","preventDefault","trim","length","newTodo","type","placeholder","value","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"6MAAe,G,MAAA,CACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,uBCpDEC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvCA,GACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKF,OAA7C,SACGE,EAAKJ,QCDCO,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,0BAASH,UAAWI,IAClB,WACA,CACE,sBAAuBD,EAAKE,YAHhC,UAOE,oBAAIL,UAAU,kBAAd,SAAiCG,EAAKG,QACtC,cAAC,EAAD,CAAUP,KAAMI,EAAKJ,WCVZQ,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAAAN,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKT,UCFhCgB,ECTS,CACb,CACEhB,GAAI,EACJY,MAAO,qBACPD,WAAW,EACXM,OAAQ,GAEV,CACEjB,GAAI,GACJY,MAAO,qBACPD,WAAW,EACXM,OAAQ,GAEV,CACEjB,GAAI,EACJY,MAAO,qCACPD,WAAW,EACXM,OAAQ,IDRkCF,KAAI,SAAAN,GAAI,kCACjDA,GADiD,IAEpDJ,KAAMa,EAAgBC,MAAK,SAAAd,GAAI,OAAIA,EAAKL,KAAOS,EAAKQ,WAAW,UAGpDG,EAAgB,WAC3B,MAAiCC,mBAAS,YAAIL,IAA9C,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOT,EAAP,KAAcY,EAAd,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAwCL,mBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAwCP,oBAAS,GAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KACA,EAA0CT,oBAAS,GAAnD,mBAAOU,EAAP,KAAsBC,EAAtB,KAuCA,OACE,sBAAK1B,UAAU,MAAf,UACE,+CAEA,uBACE2B,OAAO,aACPC,OAAO,OACPC,SAlCe,SAACC,GAWpB,GAVAA,EAAMC,iBAEDzB,EAAM0B,OAAOC,QAChBP,GAAiB,GAGdL,GACHG,GAAgB,GAGdlB,EAAM0B,OAAOC,QAAUZ,EAAc,CACvC,IAAMa,EAAU,CACdvB,OAAQU,GAAgB,EACxB3B,GAAIsB,EAAaA,EAAaiB,OAAS,GAAGvC,GAAK,EAC/CY,MAAOA,EAAM0B,OACb3B,UAAWc,EACXpB,KAAMa,EAAgBC,MAAK,SAAAd,GAAI,OAAIA,EAAKL,KAAO2B,MAAiB,MAGlEJ,EAAS,GAAD,mBAAKD,GAAL,CAAmBkB,KAC3Bd,GAAe,GACfF,EAAS,IACTI,EAAgB,KAQhB,UAKE,sBAAKtB,UAAU,QAAf,UACE,0CACA,uBACEmC,KAAK,OACL,UAAQ,aACRxC,KAAK,YACLyC,YAAY,cACZC,MAAO/B,EACPgC,SAtDgB,SAACR,GACzBZ,EAASY,EAAMS,OAAOF,MAAMG,QAAQ,4CAAyB,KAC7Dd,GAAiB,MAsDVD,GACC,sBAAMzB,UAAU,QAAhB,uCAIJ,sBAAKA,UAAU,QAAf,UACE,yCACA,yBACE,UAAQ,aACRL,KAAK,WACL0C,MAAOhB,EACPiB,SA9De,SAACR,GACxBR,GAAiBQ,EAAMS,OAAOF,OAC9Bb,GAAgB,IAwDV,UAME,wBAAQa,MAAO,EAAGI,UAAQ,EAA1B,2BACC7B,EAAgBH,KAAI,SAAAV,GAAI,OACvB,wBAAsBsC,MAAOtC,EAAKL,GAAlC,SACGK,EAAKJ,MADKI,EAAKL,UAMrB6B,GACC,sBAAMvB,UAAU,QAAhB,qCAIJ,wBAAQmC,KAAK,SAAS,UAAQ,eAA9B,oBAIF,cAAC,EAAD,CAAU3B,MAAOQ,QEzGvB0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.76a9750f.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  user && (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  )\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article className={classNames(\n    'TodoInfo',\n    {\n      'TodoInfo--completed': todo.completed,\n    },\n  )}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    <UserInfo user={todo.user} />\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Todo } from './types/Todo';\n\nconst preparedTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(user => user.id === todo.userId) || null,\n}));\n\nexport const App: React.FC = () => {\n  const [visibleTodos, setTodos] = useState([...preparedTodos]);\n  const [title, setTitle] = useState('');\n  const [isComplited, setIsComplited] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^a-zA-Z0-9А-Яа-я\\s]/g, ''));\n    setHasTitleError(false);\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(+event.target.value);\n    setHasUserError(false);\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim().length) {\n      setHasTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setHasUserError(true);\n    }\n\n    if (title.trim().length && selectedUser) {\n      const newTodo = {\n        userId: selectedUser || 0,\n        id: visibleTodos[visibleTodos.length - 1].id + 1,\n        title: title.trim(),\n        completed: isComplited,\n        user: usersFromServer.find(user => user.id === selectedUser) || null,\n      };\n\n      setTodos([...visibleTodos, newTodo]);\n      setIsComplited(false);\n      setTitle('');\n      setSelectedUser(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <span>Title </span>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            name=\"todoTitle\"\n            placeholder=\"Enter title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter the title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <span>User </span>\n          <select\n            data-cy=\"userSelect\"\n            name=\"todoUser\"\n            value={selectedUser}\n            onChange={handleNameChange}\n          >\n            <option value={0} disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}